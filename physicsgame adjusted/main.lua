-----------------------------
--- side scroller with physics integration
--- day 2 - tues - 10/28
-----------------------------
W = love.graphics.getWidth()
H = love.graphics.getHeight()

local meterScale = 32

local bgcolor = {1, 1, 1}
local gameOn = true
local drawHitboxes = false
local player = {}
local enemies = {}
local platforms = {}

local ground = {}

local msg = "TEST"

local function giveRectBody(objectType, tbl, x, y, w, h, bodyType)
  tbl.body = love.physics.newBody(world, x, y, bodyType) --x,y
  tbl.shape = love.physics.newRectangleShape(w, h) --w,h
  -- attach shape to body
  tbl.fixture = love.physics.newFixture(tbl.body, tbl.shape)
  tbl.fixture:setUserData(objectType)
end

function love.load()
  -- width, height = love.graphics.getDimensions ()
	-- love.window.setMode (width, height, {resizable=true, borderless=false})
	-- resize (width, height) -- update new translation and scale

  love.physics.setMeter(32)
  world = love.physics.newWorld(0, 9.81*32, true)
  world:setCallbacks(beginContact, endContact, preSolve, postSolve)

  giveRectBody("player", player, 100, 50, 24, 32, "dynamic") --w,h
  player.body:setFixedRotation(true)
  -- TODO: fix this!
  -- player.fixture:setDensity(80)
  player.platformCounter = 0

  player.frameNum = 1
  player.jumpTime = 0

  image = love.graphics.newImage("assets/HaloMasterChiefSheet.png")
  myQuads = {}

  for i = 1, 8 do
    myQuads[i] = love.graphics.newQuad((i-1)*96, 0, 96, 96, image:getWidth(), image:getHeight())
  end

    -- frames = {}
  -- local frame_width = 117
  -- local frame_height = 233
  -- table.insert(frames, love.graphics.newQuad(0, 0, frame_width, frame_height, image:getWidth(), image:getHeight()))
  -- currentFrame = 1

-----------------------------------
  enemies[1] = {}
  giveRectBody("enemy", enemies[1],300, H-80,60,60, "dynamic")
  local tmp_x = 300

  for i = 2,10 do
    enemies[i] = {}
    tmp_x = tmp_x + love.math.random(100, 300)
    local tmp_w = love.math.random(10,40)
    local tmp_h = love.math.random(30,120)
    local tmp_y = H-20-70
    giveRectBody("enemy", enemies[i], tmp_x, tmp_y, tmp_w, tmp_h, "dynamic")
  end

  giveRectBody("platform", ground, W/2, H - 20, W, 100, "static")
  ground.fixture:setFriction(0)
  local tmp_x = 200
  for i = 1, 30 do
    platforms[i] = {}
    tmp_x = tmp_x + (i * 200)
    local tmp_y = H - love.math.random(100, 220)
    local tmp_w = 50
    local tmp_h = 20
    giveRectBody("platform", platforms[i], tmp_x, tmp_y, tmp_w, tmp_h, "static")
    platforms[i].fixture:setFriction(1)
  end
end

function love.draw()
  -- love.graphics.translate (0, -500)
  -- love.graphics.scale( 2, 2 )
  love.graphics.setBackgroundColor(bgcolor)
  -- ground
  love.graphics.setColor({0,1,0,1})
  love.graphics.polygon("fill", ground.body:getWorldPoints(
    ground.shape:getPoints()))

  for i = 1, #platforms do
    -- draw a "filled in" polygon using the ground's coordinates
    love.graphics.polygon("fill", platforms[i].body:getWorldPoints(
                             platforms[i].shape:getPoints()))

  end


  -- "BOX"
  love.graphics.setColor({1,0,1,1})
  for i = 1, #enemies do
    love.graphics.polygon("fill", enemies[i].body:getWorldPoints(
                             enemies[i].shape:getPoints()))

  end

  -- PLAYER
  love.graphics.setColor(1,1,1,1)
  local tmp_x, tmp_y = player.body:getPosition()
  love.graphics.draw(image, myQuads[player.frameNum],
    tmp_x, tmp_y, player.body:getAngle(), 0.5, 0.5, 48, 48)

  if(drawHitboxes) then
    love.graphics.setColor(1,0,0,0.5)
    love.graphics.polygon("fill", player.body:getWorldPoints(
      player.shape:getPoints()))
    end

  love.graphics.setColor(0,0,0)
  love.graphics.printf(msg, 0,0, W, "center")

end




local function touchingAnyEnemy()
  return false
end

function love.update(dt)
  world:update(dt) -- this puts the world into motion

  if(love.keyboard.isDown("h")) then
    drawHitboxes = not drawHitboxes
  end

  -- TODO: get input, update objects, good stuff
  -- here we are going to create some keyboard events
  -- press the right arrow key to push the ball to the right
  if love.keyboard.isDown("right") then
    player.body:applyLinearImpulse(10, 0)
  -- press the left arrow key to push the ball to the left
  elseif love.keyboard.isDown("left") then
    player.body:applyForce(-400, 0)
    --player.body:setAngularDamping(.05)
  -- JUMP CHECKING
  elseif love.keyboard.isDown("space") and (player.platformCounter > 0) then
    player.body:applyLinearImpulse(0, -150)
  -- press the up arrow key to set the ball in the air
  elseif love.keyboard.isDown("up") then
    player.body:setPosition(650/2, 650/2)
    -- we must set the velocity to zero to prevent a potentially large
    -- velocity generated by the change in position
    player.body:setLinearVelocity(0, 0)
    player.body:setAngularVelocity(0)
  end
end

function checkTwoThings(a,b,thingOne,thingTwo)
  if (a:getUserData() == thingOne and b:getUserData() == thingTwo) then
    return true
  elseif (b:getUserData() == thingOne and a:getUserData() == thingTwo) then
    return true
  end
  return false
end

function beginContact(a, b, coll)
	-- msg =  a:getUserData() .. " hit " .. b:getUserData() .. "\n" .. msg
  if(checkTwoThings(a,b,"player","platform")) then
    player.platformCounter = player.platformCounter + 1
  end
end

function endContact(a, b, coll)
  if(checkTwoThings(a,b,"player","platform")) then
    player.platformCounter = player.platformCounter - 1
  end
end

function preSolve(a, b, coll)

end

function postSolve(a, b, coll, normalimpulse, tangentimpulse)

end
